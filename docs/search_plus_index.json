{"./":{"url":"./","title":"Introduction","keywords":"","body":"ThinkingPython "},"The Way of Programming.html":{"url":"The Way of Programming.html","title":"The Way of Programming","keywords":"","body":"The way of the Programming Book Problem solving is the ability to formulate problem, think creatively about solutions, and express a solution clearly and accurately. Program is instructions of performing computation. The computation would be mathematical and symbolic computation. The instructions would be input, output, arithmetics, condition, repetition. "},"Variable and data type.html":{"url":"Variable and data type.html","title":"Variable and data type","keywords":"","body":"Variable and data type Book Interactive mode and script mode Interactive mode Script mode Slides Python data type int float String boolean \"String\" 'c' Python inventor is Guido van Rossum Programming Let's that I'm given an amount of dollars, and I need to convert it to dollar, quarter, dim, nickel and penny. CoinChange.py import math def main(): # The input from the user is a float # Store the user input in userInput variable userInput = float(input(\"Enter the change amount\\n \")) # If they enter more than two digits after the decimal place, # round to the closest 100th amount = round(userInput, 2) print(\"That breaks down to ... \") dollars = math.floor(amount) print(str(dollars) + \" dollars \") quarters = int(((amount - dollars) * 100) / 25) print(str(quarters) + \" quarters \") dims = int((((amount - dollars) - quarters * 0.25) * 100) / 10) print(str(dims) + \" dims \") nickels = int((((amount - dollars) - quarters * 0.25 - dims * 0.1) * 100) / 5) print(str(nickels) + \" nickels \") pennies = round(((amount - dollars) - quarters * 0.25 - dims * 0.1 - nickels * 0.05) * 100 / 1) print(str(pennies) + \" pennies \") main() We would also use integer division A / B and modulo A % B here. Let's look at the ConvertingSeconds program and make the transition from this to CoinChange program. ConvertingSeconds.py def main(): # First, we pull out the day-sized chunks of seconds from the total # number of seconds days = total_seconds / seconds_per_day # days = total_seconds // seconds_per_day # Python3 # Then we use the modulo (or remainder) operation to get the number of # seconds left over after removing the day-sized chunks seconds_left_over = total_seconds % seconds_per_day # Next we pull out the hour-sized chunks of seconds from the number of # seconds left over from removing the day-sized chunks hours = seconds_left_over / seconds_per_hour # hours = seconds // seconds_per_hour # Python3 # Use modulo to find out how many seconds are left after pulling out # hours seconds_left_over = seconds_left_over % seconds_per_hour # Pull out the minute-sized chunks minutes = seconds_left_over / seconds_per_minute # minutes = seconds_left_over // seconds_per_minute # Python3 # Find out how many seconds are left seconds_left_over = seconds_left_over % seconds_per_minute # Because we've removed all the days, hours and minutes, all we have # left over are seconds seconds = seconds_left_over main() CoinChange.py def main(): # number of cents in dollar DOLLARS = 100 # number of cents in quarter QUARTERS = 25 # number of cent in dim DIMES = 10 # number of cent is nickel NICKELS = 5 # The input from the user is a float number # store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th cents = round(userInput * 100.0) # We pull out the dollar-sized chunks of cents from the total number of cent dollars = cents // DOLLARS # We use the modulo to get the number of cents left over after pulling out the dollar-sized chunks centsLeftOver = cents % DOLLARS # We pull out the quarter-sized chunks quarters = centsLeftOver // QUARTERS # We use the modulo to get the number of seconds left over after pulling out the quarter-sized chunks centsLeftOver = centsLeftOver % QUARTERS # We pull out the dim-sized chunks dims = centsLeftOver // DIMES # We use the modulo to get the number of seconds left over after pulling out the dim-sized chunks centsLeftOver = centsLeftOver % DIMES # We pull out the nickel-sized chunks nickels = centsLeftOver // NICKELS # We use the modulo to get the number of seconds left over after pulling out the nickel-sized chunks centsLeftOver = centsLeftOver % NICKELS print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dims) + \" dims \") print(str(nickels) + \" nickels \") print(str(centsLeftOver) + \" cents \") main() We would also use divmod here. The divmod takes two numbers and returns a pair of numbers (a tuple) consisting of their quotient and remainder. CoinChange.py def main(): # The input from the user is a float number # Store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th # convert dollars to cents cents = round(userInput * 100.0) dollars, centsLeftOver = divmod(cents, 100) quarters, centsLeftOver = divmod(centsLeftOver, 25) dimes, centsLeftOver = divmod(centsLeftOver, 10) nickels, pennies = divmod(centsLeftOver, 5) print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dimes) + \" dimes \") print(str(nickels) + \" nickels \") print(str(pennies) + \" pennies \") main() Bike.py WHEELSNEEDED = 2 FRAMESNEEDED = 1 LINKSNEEDED = 50 def main(): wheels = int(input(\"How many wheels do you have? \")) frames = int(input(\"How many frames do you have? \")) links = int(input(\"How many links do you have? \")) bikeFromWheels = wheels / WHEELSNEEDED bikeFromFrames = frames / FRAMESNEEDED bikeFromLinks = links / LINKSNEEDED numberOfBike = int(min(bikeFromWheels, bikeFromFrames, bikeFromLinks)) print(\"ALL totalled up, \" + \"you've got \" + str(numberOfBike) + \" bikes coming \\n\" + \"I'm keeping the Leftovers for myself\") leftWheels = wheels - numberOfBike * WHEELSNEEDED leftFrame = frames - numberOfBike * FRAMESNEEDED leftLinks = links - numberOfBike * LINKSNEEDED print(\"Leftovers: \") print(str(leftWheels) + \" wheels \") print(str(leftFrame) + \" frames \") print(str(leftLinks) + \" links \") main() "},"Function.html":{"url":"Function.html","title":"Function","keywords":"","body":"Function Function call A function is a named sequence of statement that performs a computation. type(96) output: int('96') output: 96 int(9.6) output: 9 float(96) output: 96.0 float('9.6') output: 9.6 str(96) output: '96' Math function import math math.pi Composition Programming languages have ability to take small building blocks and compose them. Adding new function We would be able to add new function. def is the keyword that allow us to define a function. The arguments would be in the parentheses. The syntax for calling a function is the same as for built-in function. We would use a function inside a function. variables and parameters are local They can only exist inside the function. Flow of control Start at main function. Goes into main function. Invoke a function and goes to the function. Return to the caller. Goes to the last line of main function. Fruit function and void function Fruitful function returns a value. Void function does not return a value. Why function Reusability, efficiency and collaboration. Floor division 105 / 60 output: 1.75 105 // 60 output: 1 Programming A = 1 B = 2 C = 3 D = 4 totalScore = 0 character = \"\" def QuizScore(choice): global totalScore if choice == 'A' or choice == 'a': totalScore += A elif choice == 'B' or choice == 'b': totalScore += B elif choice == 'C' or choice == 'c': totalScore += C elif choice == 'D' or choice == 'd': totalScore += D def QuestionOneDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionTwoDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionThreeDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def YourCharacter(): global character global totalScore if totalScore "}}