{"./":{"url":"./","title":"Introduction","keywords":"","body":"ThinkingPython "},"The Way of Programming.html":{"url":"The Way of Programming.html","title":"The Way of Programming","keywords":"","body":"The way of the Programming Book Problem solving is the ability to formulate problem, think creatively about solutions, and express a solution clearly and accurately. Program is instructions of performing computation. The computation would be mathematical and symbolic computation. The instructions would be input, output, arithmetics, condition, repetition. "},"Variable and data type.html":{"url":"Variable and data type.html","title":"Variable and data type","keywords":"","body":"Variable and data type Book Interactive mode and script mode Interactive mode Script mode Slides Python data type int float String boolean \"String\" 'c' Python inventor is Guido van Rossum Programming Let's that I'm given an amount of dollars, and I need to convert it to dollar, quarter, dim, nickel and penny. CoinChange.py import math def main(): # The input from the user is a float # Store the user input in userInput variable userInput = float(input(\"Enter the change amount\\n \")) # If they enter more than two digits after the decimal place, # round to the closest 100th amount = round(userInput, 2) print(\"That breaks down to ... \") dollars = math.floor(amount) print(str(dollars) + \" dollars \") quarters = int(((amount - dollars) * 100) / 25) print(str(quarters) + \" quarters \") dims = int((((amount - dollars) - quarters * 0.25) * 100) / 10) print(str(dims) + \" dims \") nickels = int((((amount - dollars) - quarters * 0.25 - dims * 0.1) * 100) / 5) print(str(nickels) + \" nickels \") pennies = round(((amount - dollars) - quarters * 0.25 - dims * 0.1 - nickels * 0.05) * 100 / 1) print(str(pennies) + \" pennies \") main() We would also use integer division A / B and modulo A % B here. Let's look at the ConvertingSeconds program and make the transition from this to CoinChange program. ConvertingSeconds.py def main(): # First, we pull out the day-sized chunks of seconds from the total # number of seconds days = total_seconds / seconds_per_day # days = total_seconds // seconds_per_day # Python3 # Then we use the modulo (or remainder) operation to get the number of # seconds left over after removing the day-sized chunks seconds_left_over = total_seconds % seconds_per_day # Next we pull out the hour-sized chunks of seconds from the number of # seconds left over from removing the day-sized chunks hours = seconds_left_over / seconds_per_hour # hours = seconds // seconds_per_hour # Python3 # Use modulo to find out how many seconds are left after pulling out # hours seconds_left_over = seconds_left_over % seconds_per_hour # Pull out the minute-sized chunks minutes = seconds_left_over / seconds_per_minute # minutes = seconds_left_over // seconds_per_minute # Python3 # Find out how many seconds are left seconds_left_over = seconds_left_over % seconds_per_minute # Because we've removed all the days, hours and minutes, all we have # left over are seconds seconds = seconds_left_over main() print pro CoinChange.py def main(): # number of cents in dollar DOLLARS = 100 # number of cents in quarter QUARTERS = 25 # number of cent in dim DIMES = 10 # number of cent is nickel NICKELS = 5 # The input from the user is a float number # store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th cents = round(userInput * 100.0) # We pull out the dollar-sized chunks of cents from the total number of cent dollars = cents // DOLLARS # We use the modulo to get the number of cents left over after pulling out the dollar-sized chunks centsLeftOver = cents % DOLLARS # We pull out the quarter-sized chunks quarters = centsLeftOver // QUARTERS # We use the modulo to get the number of seconds left over after pulling out the quarter-sized chunks centsLeftOver = centsLeftOver % QUARTERS # We pull out the dim-sized chunks dims = centsLeftOver // DIMES # We use the modulo to get the number of seconds left over after pulling out the dim-sized chunks centsLeftOver = centsLeftOver % DIMES # We pull out the nickel-sized chunks nickels = centsLeftOver // NICKELS # We use the modulo to get the number of seconds left over after pulling out the nickel-sized chunks centsLeftOver = centsLeftOver % NICKELS print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dims) + \" dims \") print(str(nickels) + \" nickels \") print(str(centsLeftOver) + \" cents \") main() We would also use divmod here. The divmod takes two numbers and returns a pair of numbers (a tuple) consisting of their quotient and remainder. CoinChange.py def main(): # The input from the user is a float number # Store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th # convert dollars to cents cents = round(userInput * 100.0) dollars, centsLeftOver = divmod(cents, 100) quarters, centsLeftOver = divmod(centsLeftOver, 25) dimes, centsLeftOver = divmod(centsLeftOver, 10) nickels, pennies = divmod(centsLeftOver, 5) print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dimes) + \" dimes \") print(str(nickels) + \" nickels \") print(str(pennies) + \" pennies \") main() Bike.py WHEELSNEEDED = 2 FRAMESNEEDED = 1 LINKSNEEDED = 50 def main(): wheels = int(input(\"How many wheels do you have? \")) frames = int(input(\"How many frames do you have? \")) links = int(input(\"How many links do you have? \")) bikeFromWheels = wheels / WHEELSNEEDED bikeFromFrames = frames / FRAMESNEEDED bikeFromLinks = links / LINKSNEEDED numberOfBike = int(min(bikeFromWheels, bikeFromFrames, bikeFromLinks)) print(\"ALL totalled up, \" + \"you've got \" + str(numberOfBike) + \" bikes coming \\n\" + \"I'm keeping the Leftovers for myself\") leftWheels = wheels - numberOfBike * WHEELSNEEDED leftFrame = frames - numberOfBike * FRAMESNEEDED leftLinks = links - numberOfBike * LINKSNEEDED print(\"Leftovers: \") print(str(leftWheels) + \" wheels \") print(str(leftFrame) + \" frames \") print(str(leftLinks) + \" links \") main() Useful code We would also use floor division A // B and modulo A % B to find hunderds, tens and ones. Digits.py def main(): number = int(input(\"Enter a integer \\n\")) # number // 100 is the 100-units # if the number was greater than 1000, # we would use % 10 to find leftover hundreds = (number // 100) % 10 print(\"hundreds = \", hundreds) # number // 10 is the 10-units # if the number was greater than 100, # we would use % 10 to find leftover tens = (number // 10) % 10 print(\"tens = \", tens) # we use % 10 to find the ones digits ones = number % 10 print(\"ones = \", ones) main() "},"Function.html":{"url":"Function.html","title":"Function","keywords":"","body":"Function Function call A function is a named sequence of statement that performs a computation. type(96) output: int('96') output: 96 int(9.6) output: 9 float(96) output: 96.0 float('9.6') output: 9.6 str(96) output: '96' Math function import math math.pi Composition Programming languages have ability to take small building blocks and compose them. Adding new function We would be able to add new function. def is the keyword that allow us to define a function. The arguments would be in the parentheses. The syntax for calling a function is the same as for built-in function. We would use a function inside a function. variables and parameters are local They can only exist inside the function. Flow of control Start at main function. Goes into main function. Invoke a function and goes to the function. Return to the caller. Goes to the last line of main function. Fruit function and void function Fruitful function returns a value. Void function does not return a value. Why function Reusability, efficiency and collaboration. Floor division 105 / 60 output: 1.75 105 // 60 output: 1 Programming QuizScore.py A = 1 B = 2 C = 3 D = 4 totalScore = 0 character = \"\" def QuizScore(choice): global totalScore if choice == 'A' or choice == 'a': totalScore += A elif choice == 'B' or choice == 'b': totalScore += B elif choice == 'C' or choice == 'c': totalScore += C elif choice == 'D' or choice == 'd': totalScore += D def QuestionOneDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionTwoDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionThreeDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def YourCharacter(): global character global totalScore if totalScore "},"While loop.html":{"url":"While loop.html","title":"While loop","keywords":"","body":"While loop Updating variable Before updating the variable, we have to initialize the variable. Increment: x = x + 1 x += 1 Decrement: x = x - 1 x -= 1 Break while True: We would use break statement to exit the loop. "},"List.html":{"url":"List.html","title":"List","keywords":"","body":"List A list is a sequence of values. The first index is 0. List is mutable. We would change the element is the list. list.append(value) list.pop(index) list.remove(value). Copying a list a = [1, 2, 3] b = a The list a and b is referencing to the same address of memory. If you modify a, you are changing b. a = [1, 2, 3] b = [] for item in a: b.append(item) The list a and b is referencing to the different address of memory. Programming Typing.py import time import sentence import sys def main(): print(\"Welcome to the WPM test! \" \"Type each sentence exactly as it appears \\n \" \"Or type DONE and well end the test. \\n \") # prompt the user to just press Enter at the beginning, # and start the timer right after that userEnter = input(\"Hit enter when ready and \" \"we will start the clock \\n\") # The user might type DONE at the very # beginning and just get zeroes for everything if userEnter == \"DONE\": print(\"You typed 0 words in 0 seconds. \\n\" + \"Your overall wpm is 0 \\n\") sys.exit(0) # Start counting seconds typingStart = time.time() phraseList = [] phraseIndex = 0 # The number of words typed and # number of mistakes made should be integers throughout the program wordNumber = 0 mistakes = 0 while True: phraseList.append(sentence.select_sentence()) print(phraseList[phraseIndex]) userPhrase = input() # The test must keep going, # selecting sentence after sentence after sentence until # the user types DONE if userPhrase == \"DONE\": break wordNumber = sentence.count_words(userPhrase) mistakes = sentence.count_mismatches(phraseList[phraseIndex], userPhrase) phraseIndex = phraseIndex + 1 # You should stop the timer right after they type DONE # Stop count seconds typingEnd = time.time() # Total time in minutes typingTime = (typingEnd - typingStart) / 60 # The number of seconds should be rounded to the nearest 100th print(\"You typed \" + str(wordNumber) + \" words\" + \" in \" + str(round((typingEnd - typingStart), 2)) + \" seconds \") # he words per minute and adjusted words per minute, # when reported on the terminal, # should be rounded to the nearest whole number print(\"Your overall wpm is \" + str(int(wordNumber / typingTime))) print( \"You made \" + str(mistakes) + \" mistakes, so your adjusted wpm is \" + str(int((wordNumber - mistakes) / typingTime))) main() Sentence.py import time import random PHRASES = ['Four Khoury faculty awarded Global Resilience Institute grants.', 'Tired of being manipulated by fake news?', 'One computer scientist’s strategies to improve data visualizations', 'Now more than ever, computer science is everywhere.', 'Prof. Manferdelli has been recognized for his work on the DSB.', 'The work of the Defense Science Board has led to effective actions.', 'Please take your dog, Cali, out for a walk; she needs exercise!', 'What a beautiful day it is on the beach, here in sunny Hawaii.', 'Dr. Quinfrey, a renowned scientist, made an invisibility machine.', 'why are all those chemicals are so hazardous to the environment?', 'The two kids collected twigs outside in the freezing cold!', 'How many times have I told you? NEVER look at your race photos.', 'Didn\\'t see a moose, though. Come on, Maine.', 'Yo minneapolis is cold', 'Amazingly few discotheques provide jukeboxes!', 'Jovial Debra Frantz swims quickly with grace and expertise.', 'Six crazy kings vowed to abolish my quite pitiful jousts.', 'Rex enjoys playing with farm ducks by the quiet lazy river?', 'The five boxing wizards jumped quickly!', 'The 116 saved 49 size 64 items for 26 friends going May 3', 'Send 99 people to do 8 sets of 150 shows.', 'The new school holds 3092 students; the older one, 568 more.', 'He has seat 459 in car 985 of train 78, which is now at gate 31.', 'The 36 men won 663 prizes in 52 games and 57 in 129 others.'] def select_sentence(): \"\"\" Function select_sentence Input: nothing Returns: a randomly-chosen sentence from the list above (string) \"\"\" return random.choice(PHRASES) def count_words(sentence): \"\"\" Function count_words Input: a string Returns: an int, the number of words in the given string. Uses one white space as a delimiter, nothing else. \"\"\" words = sentence.split(' ') return len(words) def count_mismatches(phrase_one, phrase_two): \"\"\" Function count_mismatches Input: two strings for comparison Returns: an int, the number of differences between the two strings. We count differences in each word (not each character). If the words at position i in each sentence differ at ALL, case included, that's a mismatch. If one sentence is longer than the other, each extra word it has is also a mismatch. \"\"\" list_one = phrase_one.split(' ') list_two = phrase_two.split(' ') min_length = min(len(list_one), len(list_two)) # Count the position-by-position mismatches errors = 0 for i in range(min_length): if list_one[i] != list_two[i]: errors += 1 # Add on any mismatches if one phrase was longer errors += abs(len(list_one) - len(list_two)) return errors "}}