{"./":{"url":"./","title":"Introduction","keywords":"","body":"ThinkingPython "},"The Way of Programming.html":{"url":"The Way of Programming.html","title":"The Way of Programming","keywords":"","body":"The way of the Programming Book Problem solving is the ability to formulate problem, think creatively about solutions, and express a solution clearly and accurately. Program is instructions of performing computation. The computation would be mathematical and symbolic computation. The instructions would be input, output, arithmetics, condition, repetition. "},"Variable and data type.html":{"url":"Variable and data type.html","title":"Variable and data type","keywords":"","body":"Variable and data type Book Interactive mode and script mode Interactive mode Script mode Slides Python data type int float String boolean \"String\" 'c' Python inventor is Guido van Rossum Programming Programming #2 Let's that I'm given an amount of dollars, and I need to convert it to dollar, quarter, dim, nickel and penny. CoinChange.py import math def main(): # The input from the user is a float # Store the user input in userInput variable userInput = float(input(\"Enter the change amount\\n \")) # If they enter more than two digits after the decimal place, # round to the closest 100th amount = round(userInput, 2) print(\"That breaks down to ... \") dollars = math.floor(amount) print(str(dollars) + \" dollars \") quarters = int(((amount - dollars) * 100) / 25) print(str(quarters) + \" quarters \") dims = int((((amount - dollars) - quarters * 0.25) * 100) / 10) print(str(dims) + \" dims \") nickels = int((((amount - dollars) - quarters * 0.25 - dims * 0.1) * 100) / 5) print(str(nickels) + \" nickels \") pennies = round(((amount - dollars) - quarters * 0.25 - dims * 0.1 - nickels * 0.05) * 100 / 1) print(str(pennies) + \" pennies \") main() We would also use integer division A / B and modulo A % B here. Let's look at the ConvertingSeconds program and make the transition from this to CoinChange program. ConvertingSeconds.py def main(): # First, we pull out the day-sized chunks of seconds from the total # number of seconds days = total_seconds / seconds_per_day # days = total_seconds // seconds_per_day # Python3 # Then we use the modulo (or remainder) operation to get the number of # seconds left over after removing the day-sized chunks seconds_left_over = total_seconds % seconds_per_day # Next we pull out the hour-sized chunks of seconds from the number of # seconds left over from removing the day-sized chunks hours = seconds_left_over / seconds_per_hour # hours = seconds // seconds_per_hour # Python3 # Use modulo to find out how many seconds are left after pulling out # hours seconds_left_over = seconds_left_over % seconds_per_hour # Pull out the minute-sized chunks minutes = seconds_left_over / seconds_per_minute # minutes = seconds_left_over // seconds_per_minute # Python3 # Find out how many seconds are left seconds_left_over = seconds_left_over % seconds_per_minute # Because we've removed all the days, hours and minutes, all we have # left over are seconds seconds = seconds_left_over main() print pro CoinChange.py def main(): # number of cents in dollar DOLLARS = 100 # number of cents in quarter QUARTERS = 25 # number of cent in dim DIMES = 10 # number of cent is nickel NICKELS = 5 # The input from the user is a float number # store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th cents = round(userInput * 100.0) # We pull out the dollar-sized chunks of cents from the total number of cent dollars = cents // DOLLARS # We use the modulo to get the number of cents left over after pulling out the dollar-sized chunks centsLeftOver = cents % DOLLARS # We pull out the quarter-sized chunks quarters = centsLeftOver // QUARTERS # We use the modulo to get the number of seconds left over after pulling out the quarter-sized chunks centsLeftOver = centsLeftOver % QUARTERS # We pull out the dim-sized chunks dims = centsLeftOver // DIMES # We use the modulo to get the number of seconds left over after pulling out the dim-sized chunks centsLeftOver = centsLeftOver % DIMES # We pull out the nickel-sized chunks nickels = centsLeftOver // NICKELS # We use the modulo to get the number of seconds left over after pulling out the nickel-sized chunks centsLeftOver = centsLeftOver % NICKELS print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dims) + \" dims \") print(str(nickels) + \" nickels \") print(str(centsLeftOver) + \" cents \") main() We would also use divmod here. The divmod takes two numbers and returns a pair of numbers (a tuple) consisting of their quotient and remainder. CoinChange.py def main(): # The input from the user is a float number # Store the user input in userInput variable userInput = float(input(\"Enter the change amount \")) # If they enter more than two digits after the decimal place, # round to the closest 100th # convert dollars to cents cents = round(userInput * 100.0) dollars, centsLeftOver = divmod(cents, 100) quarters, centsLeftOver = divmod(centsLeftOver, 25) dimes, centsLeftOver = divmod(centsLeftOver, 10) nickels, pennies = divmod(centsLeftOver, 5) print(str(dollars) + \" dollars \") print(str(quarters) + \" quarters \") print(str(dimes) + \" dimes \") print(str(nickels) + \" nickels \") print(str(pennies) + \" pennies \") main() Programming #3 Bike.py WHEELSNEEDED = 2 FRAMESNEEDED = 1 LINKSNEEDED = 50 def main(): wheels = int(input(\"How many wheels do you have? \")) frames = int(input(\"How many frames do you have? \")) links = int(input(\"How many links do you have? \")) bikeFromWheels = wheels / WHEELSNEEDED bikeFromFrames = frames / FRAMESNEEDED bikeFromLinks = links / LINKSNEEDED numberOfBike = int(min(bikeFromWheels, bikeFromFrames, bikeFromLinks)) print(\"ALL totalled up, \" + \"you've got \" + str(numberOfBike) + \" bikes coming \\n\" + \"I'm keeping the Leftovers for myself\") leftWheels = wheels - numberOfBike * WHEELSNEEDED leftFrame = frames - numberOfBike * FRAMESNEEDED leftLinks = links - numberOfBike * LINKSNEEDED print(\"Leftovers: \") print(str(leftWheels) + \" wheels \") print(str(leftFrame) + \" frames \") print(str(leftLinks) + \" links \") main() Useful code We would also use floor division A // B and modulo A % B to find thousands, hunderds, tens and ones. def main(): number = int(input(\"Enter a integer \\n\")) # number // 1000 is the 1000-units # if the number was greater than 10000, # we would use % 10 to find leftover thousands = (number // 1000) % 10 print(\"thousands = \", thousands) # number // 100 is the 100-units # if the number was greater than 1000, # we would use % 10 to find leftover hundreds = (number // 100) % 10 print(\"hundreds = \", hundreds) # number // 10 is the 10-units # if the number was greater than 100, # we would use % 10 to find leftover tens = (number // 10) % 10 print(\"tens = \", tens) # we use % 10 to find the ones digits ones = number % 10 print(\"ones = \", ones) main()Digits.py We would use len() to count digit. We would use for loop to traverse the integer number and use floor division A // B and modulo A % B to find digit in the 1th ones' place, 10th tens, 100th hundreds' place, 1000th thousands's place and so forth. def main(): number = int(input(\"Enter a number \")) print(\"The number contains \" + str((len(str(number)))) + \" digits. \") for i in range(1, (len(str(number))) + 1): zeros = (len(str(number)) - i) * \"0\" divisor = int(\"1\" + zeros) digit = (number // divisor) % 10 if number CountDigits.py We would use for loop to reaverse the integer and use the divmod() to find digit in the 1th ones' place, 10th tens, 100th hundreds' place, 1000th thousands's place and so forth. # def main(): # number = int(input(\"Enter a integer \\n\")) # thousands, LeftOver = divmod(number, 1000) # hundreds, LeftOver = divmod(LeftOver, 100) # tens, LeftOver = divmod(LeftOver, 10) # ones, LeftOver = divmod(LeftOver, 1) # print(str(thousands) + \" thousands \") # print(str(hundreds) + \" hundreds \") # print(str(tens) + \" tens \") # print(str(ones) + \" ones \") # # # main() def main(): number = int(input(\"Enter a integer \\n\")) print(\"The number contains \" + str((len(str(number)))) + \" digits. \") LeftOver = 0 for i in range(1, (len(str(number)) + 1)): zero = (len(str(number)) - i) * \"0\" divisor = int(\"1\" + zero) if i == 1: digit, LeftOver = divmod(number, divisor) else: digit, LeftOver = divmod(LeftOver, divisor) print(\"The 1\" + zero + \"th \" + \"digit is \" + str(digit)) main()DigitDivmod.py "},"Function.html":{"url":"Function.html","title":"Function","keywords":"","body":"Function Function call A function is a named sequence of statement that performs a computation. type(96) output: int('96') output: 96 int(9.6) output: 9 float(96) output: 96.0 float('9.6') output: 9.6 str(96) output: '96' Math function import math math.pi Composition Programming languages have ability to take small building blocks and compose them. Adding new function We would be able to add new function. def is the keyword that allow us to define a function. The arguments would be in the parentheses. The syntax for calling a function is the same as for built-in function. We would use a function inside a function. variables and parameters are local They can only exist inside the function. Flow of control Start at main function. Goes into main function. Invoke a function and goes to the function. Return to the caller. Goes to the last line of main function. Fruit function and void function Fruitful function returns a value. Void function does not return a value. Why function Reusability, efficiency and collaboration. Floor division 105 / 60 output: 1.75 105 // 60 output: 1 Programming QuizScore.py A = 1 B = 2 C = 3 D = 4 totalScore = 0 character = \"\" def QuizScore(choice): global totalScore if choice == 'A' or choice == 'a': totalScore += A elif choice == 'B' or choice == 'b': totalScore += B elif choice == 'C' or choice == 'c': totalScore += C elif choice == 'D' or choice == 'd': totalScore += D def QuestionOneDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionTwoDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def QuestionThreeDisplay(): print(\"You're in a burning building with a friend and \" + \"have 10 seconds to get out. \" + \"What do you do? \\n\") print(\"A - Save myself, of course! \\n\" + \"B - Stay and save my friend. \\n\" + \"C - If I can save my friend I'll try but if they're going to die anyway, what's the point? \\n\" + \"D - Save my friend and everyone else I can find. \\n\") def YourCharacter(): global character global totalScore if totalScore "},"While loop.html":{"url":"While loop.html","title":"While loop","keywords":"","body":"While loop Updating variable Before updating the variable, we have to initialize the variable. Increment: x = x + 1 x += 1 Decrement: x = x - 1 x -= 1 Break while True: We would use break statement to exit the loop. "},"List.html":{"url":"List.html","title":"List","keywords":"","body":"List Book A list is a sequence of values. The first index is 0. List is mutable. We would change the element is the list. list.append(value) list.pop(index) list.remove(value). Copying a list a = [1, 2, 3] b = a print(b) [info] List The list a and b is referencing to the same address of memory. If you modify a, you are changing b. a = [1, 2, 3] b = [] for item in a: b.append(item) print(b) [info] List We would use append(). The list a and b is referencing to the different address of memory. import copy a = [1, 2, 3] b = copy.deepcopy(a) print(b) [info] List We would import copy and use deepcopy(). The list a and b is referencing to the different address of memory. Programming Programming #1 The Sentence.py file has been provided. I personally wrote my version of the Typing.py. Typing.py import time import sentence import sys def main(): # Create the list to store user typing phraseList = [] # The index of the list phraseIndex = 0 # The number of words typed and # number of mistakes made should be integers throughout the program wordNumber = 0 mistakes = 0 print(\"Welcome to the WPM test! \" \"Type each sentence exactly as it appears \\n \" \"Or type DONE and well end the test. \\n \") # prompt the user to just press Enter at the beginning, # and start the timer right after that userEnter = input(\"Hit enter when ready and \" \"we will start the clock \\n\") # The user might type DONE at the very # beginning and just get zeroes for everything if userEnter == \"DONE\": print(\"You typed 0 words in 0 seconds. \\n\" + \"Your overall wpm is 0 \\n\") sys.exit(0) # Start counting seconds typingStart = time.time() while True: phraseList.append(sentence.select_sentence()) print(phraseList[phraseIndex]) userPhrase = input() # The test must keep going, # selecting sentence after sentence after sentence until # the user types DONE if userPhrase == \"DONE\": break if userPhrase == \"\": wordNumber = wordNumber + 0 else: wordNumber = wordNumber + sentence.count_words(userPhrase) mistakes = mistakes + sentence.count_mismatches(phraseList[phraseIndex], userPhrase) phraseIndex = phraseIndex + 1 # You should stop the timer right after they type DONE # Stop count seconds typingEnd = time.time() # Total time in seconds totalSeconds = typingEnd - typingStart # Total time in minutes totalMinutes = totalSeconds / 60 # The number of seconds should be rounded to the nearest 100th print(\"You typed \" + str(wordNumber) + \" words\" + \" in \" + str(round(totalSeconds, 2)) + \" seconds \") # he words per minute and adjusted words per minute, # when reported on the terminal, # should be rounded to the nearest whole number print(\"Your overall wpm is \" + str(int(wordNumber / totalMinutes))) print(\"You made \" + str(mistakes) + \" mistakes, so your adjusted wpm is \" + str(int((wordNumber - mistakes) / totalMinutes))) main() Sentence.py import time import random PHRASES = ['Four Khoury faculty awarded Global Resilience Institute grants.', 'Tired of being manipulated by fake news?', 'One computer scientist’s strategies to improve data visualizations', 'Now more than ever, computer science is everywhere.', 'Prof. Manferdelli has been recognized for his work on the DSB.', 'The work of the Defense Science Board has led to effective actions.', 'Please take your dog, Cali, out for a walk; she needs exercise!', 'What a beautiful day it is on the beach, here in sunny Hawaii.', 'Dr. Quinfrey, a renowned scientist, made an invisibility machine.', 'why are all those chemicals are so hazardous to the environment?', 'The two kids collected twigs outside in the freezing cold!', 'How many times have I told you? NEVER look at your race photos.', 'Didn\\'t see a moose, though. Come on, Maine.', 'Yo minneapolis is cold', 'Amazingly few discotheques provide jukeboxes!', 'Jovial Debra Frantz swims quickly with grace and expertise.', 'Six crazy kings vowed to abolish my quite pitiful jousts.', 'Rex enjoys playing with farm ducks by the quiet lazy river?', 'The five boxing wizards jumped quickly!', 'The 116 saved 49 size 64 items for 26 friends going May 3', 'Send 99 people to do 8 sets of 150 shows.', 'The new school holds 3092 students; the older one, 568 more.', 'He has seat 459 in car 985 of train 78, which is now at gate 31.', 'The 36 men won 663 prizes in 52 games and 57 in 129 others.'] def select_sentence(): \"\"\" Function select_sentence Input: nothing Returns: a randomly-chosen sentence from the list above (string) \"\"\" return random.choice(PHRASES) def count_words(sentence): \"\"\" Function count_words Input: a string Returns: an int, the number of words in the given string. Uses one white space as a delimiter, nothing else. \"\"\" words = sentence.split(' ') return len(words) def count_mismatches(phrase_one, phrase_two): \"\"\" Function count_mismatches Input: two strings for comparison Returns: an int, the number of differences between the two strings. We count differences in each word (not each character). If the words at position i in each sentence differ at ALL, case included, that's a mismatch. If one sentence is longer than the other, each extra word it has is also a mismatch. \"\"\" list_one = phrase_one.split(' ') list_two = phrase_two.split(' ') min_length = min(len(list_one), len(list_two)) # Count the position-by-position mismatches errors = 0 for i in range(min_length): if list_one[i] != list_two[i]: errors += 1 # Add on any mismatches if one phrase was longer errors += abs(len(list_one) - len(list_two)) return errors Programming #3 Pig.py import random import sys def Pig(totalNumber, totalPoints): while True: # PlayerOne enter R or H userChoose = input(\"Enter your choice \\n\") if userChoose == \"H\" or userChoose == \"h\": break # Random number number = random.randint(1, 6) print(\"You rolled a \" + str(number)) # Total points in this round totalNumber = totalNumber + number # Total points in all rounds totalPoints = totalPoints + number if number == 1: totalPoints = totalPoints * 0 totalNumber = totalNumber * 0 print(\"The round is over and you have lost all the points you accumulated in the round\") print(\"Points in this round: \" + str(totalNumber)) print(\"Your total is \" + str(totalPoints)) return number print(\"Points in this round: \" + str(totalNumber)) print(\"Your total is \" + str(totalPoints)) if totalNumber > 20: break if totalPoints > 20: break # If the value on the die is 1, # then the round is over and the player has lost all the points they accumulated in the round. return totalNumber def main(): # Initialize total points totalPointOne = 0 totalPointTwo = 0 currentNumber = 0 while True: # PlayerOne start to play, choose R or H print(\"PlayerOne start to play, choose R or H \\n\" + \"R - Roll \\n\" + \"H - Hold \\n\") pigOne = Pig(currentNumber, totalPointOne) if pigOne == 1: totalPointOne = 0 print(\"Round ends. \\n\") else: totalPointOne = pigOne + totalPointOne print(\"You choose hold and your total is \" + str(totalPointOne)) if totalPointOne >= 20: print(\"Player one wins \") sys.exit() elif totalPointOne = 20: print(\"Player two wins \") sys.exit() main() Java Programming Programming #1 Typing.java package TypingWord; import java.util.Date; import java.util.Scanner; public class Typing { public static void main(String[] args) { int phraseIndex = 0; int wordNumber = 0; int mistakes = 0; String[] phraseArray = new String[100]; System.out.println(\"Welcome to the WPM test! \" + \"Type each sentence exactly as it appears \\n \" + \"Or type DONE and well end the test. \\n \"); Scanner scanner = new Scanner(System.in); String userEnter = scanner.nextLine(); if (userEnter.equals(\"DONE\")) { System.out.println(\"You typed 0 words in 0 seconds. \\n\" + \"Your overall wpm is 0 \\n\"); System.exit(0); } Date startDate = new Date(); var sentence = new Sentence(); while (true) { phraseArray[phraseIndex] = sentence.selectSentence(); System.out.println(phraseArray[phraseIndex]); String userPhrase = scanner.nextLine(); if (userPhrase.equals(\"DONE\")) { break; } if (userPhrase.isEmpty()) { wordNumber = wordNumber + 0; } else { wordNumber = wordNumber + sentence.countWords(userPhrase); } mistakes = mistakes + sentence.countMismatches(phraseArray[phraseIndex], userPhrase); phraseIndex = phraseIndex + 1; } Date endDate = new Date(); float numSeconds = (float) ((endDate.getTime() - startDate.getTime()) / 1000); float numMinutes = numSeconds / 60; System.out.println(\"You typed \" + wordNumber + \" words in \" + Math.round(numSeconds * 100.0) / 100.0 + \" seconds \"); System.out.println(\"Your overall wpm is \" + Math.round(wordNumber / numMinutes)); System.out.println(\"You made \" + mistakes + \" mistakes, so your adjusted wpm is \" + Math.round((wordNumber - mistakes) / numMinutes)); } } Sentence.java package TypingWord; import java.util.Random; public class Sentence { public Sentence() { } public String[] phrases() { return new String[]{\"Four Khoury faculty awarded Global Resilience Institute grants. \", \"Tired of being manipulated by fake news? \", \"One computer scientist’s strategies to improve data visualizations \", \"Now more than ever, computer science is everywhere.\", \"Prof. Manferdelli has been recognized for his work on the DSB.\", \"The work of the Defense Science Board has led to effective actions.\", \"Please take your dog, Cali, out for a walk; she needs exercise!\", \"What a beautiful day it is on the beach, here in sunny Hawaii.\", \"Dr. Quinfrey, a renowned scientist, made an invisibility machine.\", \"why are all those chemicals are so hazardous to the environment?\", \"The two kids collected twigs outside in the freezing cold!\", \"How many times have I told you? NEVER look at your race photos.\", \"Didn\\\"t see a moose, though. Come on, Maine.\", \"Yo minneapolis is cold\", \"Amazingly few discotheques provide jukeboxes!\", \"Jovial Debra Frantz swims quickly with grace and expertise.\", \"Six crazy kings vowed to abolish my quite pitiful jousts.\", \"Rex enjoys playing with farm ducks by the quiet lazy river?\", \"The five boxing wizards jumped quickly!\", \"The 116 saved 49 size 64 items for 26 friends going May 3\", \"Send 99 people to do 8 sets of 150 shows.\", \"The new school holds 3092 students; the older one, 568 more.\", \"He has seat 459 in car 985 of train 78, which is now at gate 31.\", \"The 36 men won 663 prizes in 52 games and 57 in 129 others.\"}; } public String selectSentence() { // Random string from string array Random random = new Random(); return phrases()[random.nextInt(phrases().length)]; } public int countWords(String phrase) { String[] words = phrase.split(\" \"); return words.length; } public int countMismatches(String phrasesOne, String phrasesTwo) { String[] listOne = phrasesOne.split(\" \"); String[] listTwo = phrasesTwo.split(\" \"); int min_length = Math.min(listOne.length, listTwo.length); int errors = 0; for (int i = 0; i Programming #3 Main.java package Pig; public class Main { public static void main(String[] args) { int totalPointOne = 0; int totalPointTwo = 0; int currentNumber; while (true) { currentNumber = 0; var pigOne = new Pig(currentNumber, totalPointOne); // PlayerOne start to play, choose R or H System.out.println(\"PlayerOne start to play, choose R or H \\n\" + \"R - Roll \\n\" + \"H - Hold \\n\"); pigOne.CalculatePoint(); if (pigOne.getNumber() == 1) { totalPointOne = 0; System.out.println(\"Round ends. \\n\"); } else { totalPointOne += pigOne.getTotalNumber(); System.out.println(\"You choose hold and your total is \" + totalPointOne); } if (totalPointOne >= 20) { System.out.println(\"Player one wins\"); System.exit(0); } else { currentNumber = 0; var pigTwo = new Pig(currentNumber, totalPointTwo); System.out.println(\"It is your turn, PlayerTwo \\n\" + \"R - Roll \\n\" + \"H - Hold \\n\"); pigTwo.CalculatePoint(); if (pigTwo.getNumber() == 1) { totalPointTwo = 0; System.out.println(\"Round ends. \\n\"); } else { totalPointTwo += pigTwo.getTotalNumber(); System.out.println(\"You choose hold and your total is \" + totalPointTwo); } if (totalPointTwo >= 20) { System.out.println(\"Player two wins\"); System.exit(0); } } } } } Pig.java package Pig; import java.util.Random; import java.util.Scanner; public class Pig { private int number; private int totalNumber; private int totalPoints; public Pig(int totalNumber, int totalPoints) { this.totalNumber = totalNumber; this.totalPoints = totalPoints; } public void CalculatePoint() { while (true) { // PlayerOne enter R or H System.out.println(\"Enter your choice \\n\"); Scanner scanner = new Scanner(System.in); String userChoose = scanner.nextLine(); if (userChoose.equals(\"H\") || userChoose.equals(\"h\")) { break; } // Random number Random random = new Random(); number = random.nextInt(6) + 1; System.out.println(\"You rolled a \" + number); // Total points in this round totalNumber = totalNumber + number; // Total points in all rounds totalPoints = totalPoints + number; if (number == 1){ totalPoints = 0; totalNumber = 0; System.out.println(\"The round is over and you have lost all the points you accumulated in the round\"); System.out.println(\"Points in this round: \" + totalNumber); System.out.println(\"Your total is \" + totalPoints); break; } System.out.println(\"Points in this round: \" + totalNumber); System.out.println(\"Your total is \" + totalPoints); if (totalNumber > 20) { break; } if (totalPoints > 20) { break; } } } public int getNumber() { return number; } public int getTotalNumber() { return totalNumber; } public int getTotalPoints() { return totalPoints; } } "},"String.html":{"url":"String.html","title":"String","keywords":"","body":"String Book A string is a sequence of character. We would user string to store letters, words, and sentence in Python. The string built-int function len. You would use a for and while loop to traverse the string and display each letter on a line by itself. The string is immutable We would use + concatenation, * multiple concatenation, [] index, and [start:end] slicing for string. These would not affect the string. s.upper would not affect the string s. We would use the assignment operator to store the s.upper() like this s = s.upper(). def modify_string(st): st = st.replace('a', 'w') def main(): my_string = 'ab' modify_string(my_string) print(my_string) main() [info] String The output would be ab. We would use the assignment operator to store modify_string(my_string) like this my_string = modify_string(my_string). Comparatively, list is mutable. def modify_list(lst): lst.remove('a') def main(): my_list = ['a', 'b', 'c'] modify_list(my_list) print(my_list) main() [info] List The output would be ['b', 'c']. Integer is immutable. def modify_int(intgr): intgr = intgr / 10 def main(): intgr = 20 modify_int(intgr) print(intgr) main() [info] Integer The output would be 20. We would use the assignment operator to store modify_int(intgr) like this intgr = modify_int(intgr). The search function def find(word, letter): index = 0 while index The counter function word = 'banana' count = 0 for letter in word: if letter == 'a': count = count + 1 print(count) The string function word.upper() mystr.lower() Returns an all-uppercase or all-lowercase version of the string. word.find('a') Returns the starting position of the first instance of the given string. in returns True or False in_both function def in_both(word1, word2): for letter in word1: if letter in word2: print(letter) Programming Programming #1 The test_upc.py file has been provided. I personally wrote my version of the upc.py. def is_valid_upc(upc_list): \"\"\"Function is_valid_upc Input: List of integers, a possible UPC number Returns: Boolean, indicating whether the given input is valid or not \"\"\" # Initialize odd_sum odd_sum = 0 # Initialize even_sum even_sum = 0 # If the input is less than 2 digits long, or if all the digits have value 0, # # the code is ​not valid if len(upc_list) upc.py from upc import is_valid_upc def test_valid_upc(): \"\"\" Function test_valid_upc Input: Nothing Returns: int, number of tests that failed. Does: Invokes the is_valid_upc function on several different inputs, expecting the function to return True. Counts the number of times it returns False instead, chalking them up as fails. \"\"\" num_failed = 0 # Test 1: 12-digit UPC, starts with 0 test_input = [0, 7, 3, 8, 5, 4, 0, 0, 8, 0, 8, 9] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 2: 12-digit UPC, starts/ends with non-zero test_input = [7, 1, 8, 1, 0, 3, 1, 6, 7, 9, 5, 6] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 3: 13-digit UPC, starts/ends with non-zero test_ input = [9, 7, 8, 1, 4, 9, 1, 9, 3, 9, 3, 6, 9] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 4: 13-digit UPC, ends with zero test_input = [9, 7, 8, 1, 4, 9, 4, 9, 6, 9, 6, 6, 0] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 5: 2-digit UPC, still valid test_input = [7, 9] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 6: 5-digit UPC, still valid test_input = [0, 7, 9, 0, 0] print('Testing', test_input, 'is valid...', end='') if is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 return num_failed def test_invalid_upc(): \"\"\" Function test_invalid_upc Input: Nothing Returns: int, number of tests that failed. Does: Invokes the is_valid_upc function on several different inputs, expecting the function to return False. Counts the number of times it returns True instead, chalking them up as fails. \"\"\" num_failed = 0 # Test 1: 12-digit UPC, mistyped a 6 as 5 from a valid one test_input = [7, 1, 8, 1, 0, 3, 1, 6, 7, 9, 5, 5] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 2: 12-digit UPC, transposed two numbers from a valid one test_input = [0, 7, 3, 8, 4, 5, 0, 0, 8, 0, 8, 9] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 3: 13-digit UPC, transposed two numbers from a valid one test_input = [9, 8, 7, 1, 4, 9, 1, 9, 3, 9, 3, 6, 9] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 4: 2 digits, but invalid test_input = [9, 7] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 5: 1-digit UPC, invalid by default test_input = [1] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 6: 0-digit UPC, invalid by default test_input = [] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 # Test 7: 12-digit UPC, but all zeroes, so invalid test_input = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] print('Testing', test_input, 'is not valid...', end='') if not is_valid_upc(test_input): print('SUCCESS!n') else: print('FAIL :(n') num_failed += 1 return num_failed def main(): print('Testing VALID upc numbers.n') num_fails = test_valid_upc() if num_fails == 0: print('All valid tests passed!nn') else: print('Sorry, something failed. Go back and fix pls.nn') print('Testing INVALID upc numbers.n') num_fails = test_invalid_upc() if num_fails == 0: print('All invalid tests passed!nn') else: print('Sorry, something failed. Go back and fix pls.nn') main()test_upc.py Programming #2 The mbta_directions.py file has been provided. I personally wrote my version of the mbta.py. # The list of valid stations RED_LINE = [\"Ashmont\", \"Shawmut\", \"Fields Corner\", \"Savin Hill\", \"JFK/UMass\", \"Andrew\", \"Broadway\", \"South Station\", \"Downtown Crossing\", \"Park St\", \"Charles/MGH\", \"Kendall\", \"Central\", \"Harvard\", \"Porter\", \"Davis\", \"Alewife\"] # List of string to uppercase # Accept upper/lowercase station names, no matter how the user chooses to capitalize UPPERCASE_RED_LINE = [] for station in RED_LINE: UPPERCASE_RED_LINE.append(station.upper()) RED_LINE = UPPERCASE_RED_LINE # # We would use list comprehension for list of string to uppercase # RED_LINE = [element.upper() for element in RED_LINE] # # We would use map() for list of string to uppercase # RED_LINE = list(map(lambda element: element.upper(), RED_LINE)) def is_valid_station(station_name): \"\"\" Function is_valid_station Input: station name, a string. Returns: boolean, True if station is in the red line, False otherwise \"\"\" # Accept upper/lowercase station names, no matter how the user chooses to capitalize # String to uppercase station_name = station_name.upper() return station_name in RED_LINE def get_direction(start_station, end_station): \"\"\"Function get_direction Input: start and end stations, both strings Returns: first stop or last stop on the red line. i. If either station doesn’t exist on the red line, return the string ​\"no destination found\"​. ii. If both stations are the same, return ​\"no destination found\" \"\"\" # Accept upper/lowercase station names, no matter how the user chooses to capitalize # String to uppercase start_station = start_station.upper() end_station = end_station.upper() if (start_station not in RED_LINE) or (end_station not in RED_LINE): return \"no destination found\" elif start_station == end_station: return \"no destination found\" elif RED_LINE.index(end_station) - RED_LINE.index(start_station) > 0: return \"Alewife\" else: return \"Ashmont\" def get_num_stops(start_station, end_station): \"\"\"Function get_num_stops Input: start and end stations, both strings Returns: number of stops from start to end, a positive integer. If either station doesn’t exist on the red line, or if both stations are the same, return 0 \"\"\" # Accept upper/lowercase station names, no matter how the user chooses to capitalize # String to uppercase start_station = start_station.upper() end_station = end_station.upper() if (start_station not in RED_LINE) or (end_station not in RED_LINE): return 0 elif start_station == end_station: return 0 else: return abs(RED_LINE.index(end_station) - RED_LINE.index(start_station))mbta.py \"\"\" CS5001 Fall 2019 HW 4 Starter code -- This is a driver for getting directions out of the mbta module. This program makes several calls to functions you\"ll define in a module named mbta.py. Names, parameters, and return types can be inferred from the code below and are also described in the HW spec. Simplifications compared to actual T directions: * red line only, ashmont branch only * unforgiving station-name matches (case must match, and abbreviations too, as in Park St) Test cases for the whole program (you\"ll still need to test your individual functions as well): * Input: Shawmut to Fields Corner. Output: 1 stop, towards Alewife * Input: Kendall to Savin Hill. Output: 8 stops, towards Ashmont * Input: Alewife to Davis. Output: 1 stop, towards Ashmont * Input: Broadway to Charles/MGH. Output: 4 stops, towards Alewife * Input: Ashmont to Alewife. Output: 16 stops, towards Alewife * Input: Porter to Porter. Output: I can't help you \"\"\" import mbta def main(): # Gather and validate input (user provides names of start/end stations) # Assumption: User is not transferring start_station = input(\"Enter a starting T station\\n\") while not mbta.is_valid_station(start_station): start_station = input(\"I've never heard of that station, \" \"please enter again\\n\") end_station = input(\"Enter your destination T station\\n\") while not mbta.is_valid_station(end_station): end_station = input(\"I've never heard of that station, \" \"please enter again\\n\") # Figure out the direction to go on that line (final station # in the direction from start to end) direction = mbta.get_direction(start_station, end_station) num_stops = mbta.get_num_stops(start_station, end_station) # Report the result, assuming we\"re actually going somewhere if num_stops == 0: print(start_station, \" to \", end_station, \"? \" \"I can't help you with that one!\", sep=\"\") else: print(\"Get on at \", start_station, \" toward \", direction, \".\\n\" \"Take the train for \", num_stops, \" stops and arrive at \", end_station, \".\", sep=\"\") main()mbta_directions.py Programming #3 The kmeans_viz.py file has been provided. I personally wrote my version of the kmeans_driver.py. import math import random import kmeans_viz # Your initial dataset is this list of lists, containing 100 2-dimensional points # Input data set DATA = [[-32.97, -21.06], [9.01, -31.63], [-20.35, 28.73], [-0.18, 26.73], [-25.05, -9.56], [-0.13, 23.83], [19.88, -18.32], [17.49, -14.09], [17.85, 27.17], [-30.94, -8.85], [4.81, 42.22], [-4.59, 11.18], [9.96, -35.64], [24.72, -11.39], [14.44, -43.31], [-10.49, 33.55], [4.24, 31.54], [-27.12, -17.34], [25.24, -12.61], [20.26, -4.7], [-16.4, -19.22], [-15.31, -7.65], [-26.61, -20.31], [15.22, -30.33], [-29.3, -12.42], [-50.24, -21.18], [-32.67, -13.11], [-30.47, -17.6], [-23.25, -6.72], [23.08, -9.34], [-25.44, -6.09], [-37.91, -4.55], [0.14, 34.76], [7.93, 49.21], [-6.76, 12.14], [-19.13, -2.24], [12.65, -7.23], [11.25, 25.98], [-9.03, 22.77], [9.29, -26.2], [15.83, -1.45], [-22.98, -27.37], [-25.12, -23.35], [21.12, -26.68], [20.39, -24.66], [26.69, -28.45], [-45.42, -25.22], [-8.37, -21.09], [11.52, -16.15], [7.43, -32.89], [-31.94, -11.86], [14.48, -10.08], [0.63, -20.52], [9.86, 13.79], [-28.87, -17.15], [-29.67, -22.44], [-20.94, -22.59], [11.85, -9.23], [30.86, -21.06], [-3.8, 22.54], [-5.84, 21.71], [-7.01, 23.65], [22.5, -11.17], [-25.71, -14.13], [-32.62, -15.93], [-7.27, 12.77], [26.57, -13.77], [9.94, 26.95], [-22.45, -23.18], [-34.7, -5.62], [29.53, -22.88], [0.7, 31.02], [-22.52, -10.02], [-23.36, -14.54], [-19.44, -12.94], [-0.5, 23.36], [-45.27, -19.8], [8.95, 13.63], [47.16, -14.46], [5.57, 4.85], [-19.03, -25.41], [28.16, -13.86], [-15.42, -14.68], [10.19, -25.08], [0.44, 23.65], [-20.71, -20.94], [35.91, -20.07], [42.81, -21.88], [5.1, 9.33], [-15.8, -18.47], [5.39, -26.82], [-40.53, -17.16], [-29.54, 23.72], [7.8, 23.4], [-22.19, -27.76], [-23.48, -25.01], [-21.2, -21.74], [23.14, -24.14], [-28.13, -13.04], [-24.38, -6.79]] def main(): # data​, a list of lists, each containing exactly # 2 floats to represent a 2-dimensional point. For this program, ​ # data​ will contain 100 points. (This should be the same as input data. data = DATA # centroids​, a list of lists, each containing exactly # 2 floats to represent a 2-dimensional point. # For this program, ​centroids​ will contain 4 points, because we’re making 4 clusters. centroids = [] # assignment​, a list of lists, each containing exactly 2 integers to represent the indices of ​data # and ​centroids​, respectively. For example, if assignment contains [[8, 0], [9, 3]], then we would # say that ​data[8]​is assigned to ​centroid[0]​, and ​data[9]​ is assigned to centroid[3] # colors​, a list of strings that is the same length as ​centroids. assignment = [] # colors​, a list of strings that is the same length as ​centroids colors = [\"red\", \"blue\", \"purple\", \"green\"] # Set the number of clusters (i.e., the value of ​k​ in ​k-means clustering​). We’ll use 4 number_of_clusters = 4 # Choose 4 random points to be your “centroids.” Our centroids will be chosen from our initial data. # Choose 4 points at random from the input data set. random_points = [] for index in range(number_of_clusters): random_points.append(random.choice(data)) # For each point in the data set, find the closest centroid. # Assign that point to the centroid. # Once all the points are assigned to a centroid, we have our clusters # The closest centroid position_one = 0 position_two = 0 minimum = 100 for point_A in data: for point_B in random_points: # The closest centroid for a given point is chosen using the Euclidean distance algorithm distance = abs(math.sqrt(((point_A[0] - point_B[0]) ** 2) + ((point_A[1] - point_B[1]) ** 2))) if (distance != 0) and (distance kmeans_driver.py import turtle NUM_COORDINATES = 2 def draw_centroids(centroids, colors): \"\"\" Function draw_centroids Input: Centroids (a list of lists), and List of colors (strings) Returns: nothing Does: Iterates through the list of centroids. Each list in centroids is expected to be a 2-dimensional point. For example, centroids might contain [[0, 0], [1, 2]], and this funciton will draw a point at coordinates (0, 0) and a point at coordinates (1, 2). Repeatedly calls helper funciton draw_centroid, once per point. There should be as many centroids as there are colors (each centroid gets a unique color on the screen). If the input format is not as expected, no error is reported, it just stops drawing. \"\"\" if len(centroids) != len(colors): return for i in range(len(centroids)): if len(centroids[i]) == NUM_COORDINATES: draw_centroid(colors[i], centroids[i][0], centroids[i][1]) turtle.hideturtle() def draw_assignment(centroids, data, assignment, colors): \"\"\"Function draw_assignment Input: centroids (a list of lists), data (a list of lists), assignment (a list of lists, organized by index), and a list of colors (strings). Returns: Nothing Does: Uses the nested list assignment to find the indices of each data point in data, and its corresponding centroid in centroids. Once the correct point is found, we draw it using the corresponding centroid's color. For example, we expect assignment to have the format [[0, 1], [1, 3], ...] indicating that data[@] maps to centroids[1], and data[1] maps to centroids[1]. Therefore, we draw the point data[0] with color colors[1]. And we draw the point data[1] with the color colors[3]. There should be as many centroids as there are colors (each cluster gets a unique color corresponding with its centroid). If the input format is not as expected, no error is reported, it just stops drawing. \"\"\" if len(centroids) != len(colors): return for lst in assignment: if len(lst) = len(data) or cent_index >= len(centroids): return draw_point(colors[cent_index], data[data_index][0], data[data_index][1]) def draw_centroid(color, x, y): \"\"\"Function draw_centroid Input: a color (string), an x-coord (float) and a y-coord (float) Returns: nothing Does: Draws a cross-shape, of size 10, with center at the (x,y) indicated. \"\"\" turtle.color(color) turtle.penup() turtle.goto(x, y - 10) turtle.pendown() def draw_centroid(color, x, y): \"\"\"Function draw_centroid Input: a color (string), an x-coord (float) and a y-coord (float) Returns: nothing Does: Draws a cross-shape, of size 10, with center at the (x,y) indicated. \"\"\" turtle.color(color) turtle.penup() turtle.goto(x, y - 10) turtle.pendown() turtle.goto(x, y + 10) turtle.penup() turtle.goto(x - 10, y) turtle.pendown() turtle.goto(x + 10, y) def draw_point(color, x, y): \"\"\"Function draw_point Input: a color (string), an x-coord (float) and a y-coord (float) Returns: nothing Does: Draws a single point at the (x,y) indicated. \"\"\" turtle.color(color) turtle.penup() turtle.goto(x, y) turtle.pendown() turtle.dot()kmeans_viz.py Java Programming Programming #1 package UPCNumber; import java.util.Scanner; public class main { public static void main(String[] args) { // int[] upc_list = new int[] {0, 7, 3, 8, 5, 4, 0, 0, 8, 0, 8, 9}; // User would enter the pure digit upc number. System.out.println(\"Enter upc number \"); Scanner scanner = new Scanner(System.in); String upc_number = scanner.nextLine(); // // Count the digits in integer. The type of upc_number would be string. This would be the size of array. // int countDigit = String.valueOf(upc_number).length(); // // We would count digit in integer like this. The type of upc_number would be integer. // int countDigit = Integer.toString(upc_number).length(); // We would count digit in integer like this. The type of upc_number would be string. int countDigit = upc_number.length(); // String to array of integer. int[] upc_list = new int[countDigit]; for (int i = 0; i main.java package UPCNumber; public class IsValidUPC { private int[] upcList; private int oddSum; private int evenSum; private int totalSum; private int count; public IsValidUPC(int[] upcList) { this.upcList = upcList; // Initialize odd_sum this.oddSum = 0; // Initialize even_sum this.evenSum = 0; // Initialize totalSum this.totalSum = 0; // Initialize count this.count = 0; } public boolean is_valid_upc() { // If the input is less than 2 digits long, or if all the digits have value 0, // the code is ​not valid if (upcList.length IsValidUPC.java Programming #2 package MBTA; import java.util.ArrayList; import java.util.Arrays; import java.util.List; public class mbta { public mbta() { } /** * RED_LINE * * @return The list of valid stations */ public List RED_LINE() { return new ArrayList(List.of(\"Ashmont\", \"Shawmut\", \"Fields Corner\", \"Savin Hill\", \"JFK/UMass\", \"Andrew\", \"Broadway\", \"South Station\", \"Downtown Crossing\", \"Park St\", \"Charles/MGH\", \"Kendall\", \"Central\", \"Harvard\", \"Porter\", \"Davis\", \"Alewife\")); } /** * is_valid_station * * @param station_name, a string * @return boolean, True if station is in the red line, False otherwise */ public boolean is_valid_station(String station_name) { // List of string contains a station name return RED_LINE().contains(station_name); // // Array of string contains a station name // for (int i = 0; i 0) { return \"Alewife\"; } else { return \"Ashmont\"; } // // Access the index of array element. // int start_station_index = 0; // for (int index = 0; index 0) { // return \"Alewife\"; // } else if (end_station_index - start_station_index mbta.java package MBTA; import java.util.Scanner; public class mbta_directions { public static void main(String[] args) { var mbta = new mbta(); // Gather and validate input (user provides names of start/end stations) // Assumption: User is not transferring. System.out.println(\"Enter a starting T station \\n\"); Scanner scanner = new Scanner(System.in); String start_station = scanner.nextLine(); while (!mbta.is_valid_station(start_station)) { System.out.println(\"I've never heard of that station, please enter again \\n\"); start_station = scanner.nextLine(); } System.out.println(\"Enter your destination T station \\n\"); String end_station = scanner.nextLine(); while (!mbta.is_valid_station(end_station)) { System.out.println(\"I've never heard of that station, please enter again \\n\"); end_station = scanner.nextLine(); } // Figure out the direction to go on that line (final station // in the direction from start to end). String direction = mbta.get_direction(start_station, end_station); int num_stops = mbta.get_num_stops(start_station, end_station); // Report the result, assuming we\"re actually going somewhere. if (num_stops == 0) { System.out.println(start_station + \" to \" + end_station + \"? \" + \"I can't help you with that one! \"); } else { System.out.println(\"Get on at \" + start_station + \" toward \" + direction + \".\\n\" + \"Take the train for \" + num_stops + \" \" + \"stops and arrive at \" + end_station + \".\"); } } }mbta_directions.java Useful code def is_prime(num): \"\"\" Function is_prime Parameters: positive integer Returns: boolean, True if prime, and False otherwise (it has a factor > 1) \"\"\" factor = 2 while factor PrimeNumber.py "}}